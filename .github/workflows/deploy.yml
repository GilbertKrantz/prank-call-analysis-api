name: Deploy FastAPI App
on:
  push:
    branches: [master]
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CONTAINER_NAME: fastapi-api
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Convert repository name to lowercase
        id: lowercase
        run: echo "image_name=$(echo ${{ env.IMAGE_NAME }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.lowercase.outputs.image_name }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=sha-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production
    outputs:
      image_name: ${{ steps.lowercase.outputs.image_name }}
      image_tag: ${{ steps.get_tag.outputs.tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Convert repository name to lowercase
        id: lowercase
        run: echo "image_name=$(echo ${{ env.IMAGE_NAME }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Get image tag
        id: get_tag
        run: echo "tag=sha-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} <<'EOF'
            set -e
            export REGISTRY="${{ env.REGISTRY }}"
            export IMAGE_NAME="${{ steps.lowercase.outputs.image_name }}"
            export TAG="${{ steps.get_tag.outputs.tag }}"
            export CONTAINER_NAME="${{ env.CONTAINER_NAME }}"
            export GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}"
            
            echo "Logging into container registry..."
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login $REGISTRY -u ${{ github.actor }} --password-stdin
            
            echo "Checking if image exists..."
            FULL_IMAGE_NAME="$REGISTRY/$IMAGE_NAME:$TAG"
            echo "Looking for image: $FULL_IMAGE_NAME"
            
            # Try to pull the image with retry logic
            for i in {1..3}; do
              echo "Attempt $i: Pulling image..."
              if docker pull "$FULL_IMAGE_NAME"; then
                echo "Successfully pulled image"
                break
              else
                echo "Failed to pull image, attempt $i"
                if [ $i -eq 3 ]; then
                  echo "All pull attempts failed. Checking available tags..."
                  # List available tags for debugging
                  echo "Available images in registry:"
                  docker search ghcr.io/$IMAGE_NAME || echo "Could not search registry"
                  exit 1
                fi
                sleep 10
              fi
            done
            
            echo "Setting up application directory..."
            mkdir -p ~/fastapi-app
            cd ~/fastapi-app
            
            echo "Creating docker-compose.yml..."
            cat > docker-compose.yml <<EOL
            version: '3.8'
            services:
              fastapi:
                image: $FULL_IMAGE_NAME
                container_name: $CONTAINER_NAME
                ports:
                  - "8000:8000"
                environment:
                  - GEMINI_API_KEY=$GEMINI_API_KEY
                restart: unless-stopped
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                logging:
                  driver: "json-file"
                  options:
                    max-size: "10m"
                    max-file: "3"
          EOL
            
            echo "Stopping existing container..."
            docker stop $CONTAINER_NAME 2>/dev/null || true
            docker rm $CONTAINER_NAME 2>/dev/null || true
            
            echo "Starting new container..."
            docker compose up -d
            
            echo "Waiting for health check..."
            timeout=60
            while [ $timeout -gt 0 ]; do
              if docker compose ps | grep -q "healthy\|Up"; then
                echo "Container is running"
                break
              fi
              echo "Waiting for container to be ready... ($timeout seconds left)"
              sleep 5
              timeout=$((timeout - 5))
            done
            
            if [ $timeout -le 0 ]; then
              echo "Container failed to become healthy"
              docker compose logs
              exit 1
            fi
            
            echo "Cleaning up old images..."
            docker image prune -f
            echo "Deployment completed successfully"
          EOF
